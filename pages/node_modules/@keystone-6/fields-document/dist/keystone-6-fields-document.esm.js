import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import path from 'path';
import { ApolloError } from 'apollo-server-errors';
import { jsonFieldTypePolyfilledForSQLite } from '@keystone-6/core/types';
import { graphql } from '@keystone-6/core';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { Editor, Text } from 'slate';
import { c as createDocumentEditor, a as assertNever } from './index-d6667550.esm.js';
import * as t from 'io-ts';
import excess from 'io-ts-excess';
import { i as isValidURL } from './api-0dc0a04a.esm.js';
import _toPropertyKey from '@babel/runtime/helpers/esm/toPropertyKey';
import { parse, executeSync } from 'graphql';
import weakMemoize from '@emotion/weak-memoize';
import '@babel/runtime/helpers/extends';
import '@keystone-ui/core';
import 'react';
import 'is-hotkey';
import 'slate-react';
import 'slate-history';
import '@keystone-ui/popover';
import '@keystone-ui/tooltip';
import '@keystone-ui/icons/icons/LinkIcon';
import '@keystone-ui/icons/icons/Trash2Icon';
import '@keystone-ui/icons/icons/ExternalLinkIcon';
import './orderable-eb864358.esm.js';
import '@dnd-kit/core';
import '@dnd-kit/sortable';
import '@dnd-kit/modifiers';
import '@keystone-ui/button';
import '@keystone-6/core/admin-ui/context';
import '@keystone-6/core/fields/types/relationship/views/RelationshipSelect';
import '@keystone-ui/fields';
import '@keystone-ui/icons/icons/ColumnsIcon';
import 'apply-ref';
import '@keystone-ui/icons/icons/BoldIcon';
import '@keystone-ui/icons/icons/ItalicIcon';
import '@keystone-ui/icons/icons/PlusIcon';
import '@keystone-ui/icons/icons/ChevronDownIcon';
import '@keystone-ui/icons/icons/Maximize2Icon';
import '@keystone-ui/icons/icons/Minimize2Icon';
import '@keystone-ui/icons/icons/MoreHorizontalIcon';
import '@keystone-ui/icons/icons/CodeIcon';
import '@keystone-ui/icons/icons/AlignLeftIcon';
import '@keystone-ui/icons/icons/AlignRightIcon';
import '@keystone-ui/icons/icons/AlignCenterIcon';
import '@keystone-ui/icons/icons/MinusIcon';
import 'match-sorter';
import 'scroll-into-view-if-needed';
import 'mdast-util-from-markdown';
import 'mdast-util-gfm-autolink-literal/from-markdown';
import 'micromark-extension-gfm-autolink-literal';
import 'mdast-util-gfm-strikethrough/from-markdown';
import 'micromark-extension-gfm-strikethrough';
import '@braintree/sanitize-url';

// it's just about validating that it's a valid slate structure
// we'll then run normalize on it which will enforce more things

const markValue = t.union([t.undefined, t.literal(true)]);
const text = excess(t.type({
  text: t.string,
  bold: markValue,
  italic: markValue,
  underline: markValue,
  strikethrough: markValue,
  code: markValue,
  superscript: markValue,
  subscript: markValue,
  keyboard: markValue,
  insertMenu: markValue
}));

class URLType extends t.Type {
  constructor() {
    super('string', u => typeof u === 'string' && isValidURL(u), (u, c) => this.is(u) ? t.success(u) : t.failure(u, c), t.identity);

    _defineProperty(this, "_tag", 'URLType');
  }

}

const urlType = new URLType();
const link = t.recursion('Link', () => excess(t.type({
  type: t.literal('link'),
  href: urlType,
  children
})));
const relationship = t.recursion('Relationship', () => excess(t.type({
  type: t.literal('relationship'),
  relationship: t.string,
  data: t.union([t.null, relationshipData]),
  children
})));
const inline = t.union([text, link, relationship]);
const layoutArea = t.recursion('Layout', () => excess(t.type({
  type: t.literal('layout'),
  layout: t.array(t.number),
  children
})));
const onlyChildrenElements = t.recursion('OnlyChildrenElements', () => excess(t.type({
  type: t.union([t.literal('blockquote'), t.literal('layout-area'), t.literal('code'), t.literal('divider'), t.literal('list-item'), t.literal('list-item-content'), t.literal('ordered-list'), t.literal('unordered-list')]),
  children
})));
const textAlign = t.union([t.undefined, t.literal('center'), t.literal('end')]);
const heading = t.recursion('Heading', () => excess(t.type({
  type: t.literal('heading'),
  textAlign,
  level: t.union([t.literal(1), t.literal(2), t.literal(3), t.literal(4), t.literal(5), t.literal(6)]),
  children
})));
const paragraph = t.recursion('Paragraph', () => excess(t.type({
  type: t.literal('paragraph'),
  textAlign,
  children
})));
const relationshipData = excess(t.type({
  id: t.string,
  label: t.union([t.undefined, t.string]),
  data: t.union([t.undefined, t.record(t.string, t.any)])
}));
const componentBlock = t.recursion('ComponentBlock', () => excess(t.type({
  type: t.literal('component-block'),
  component: t.string,
  props: t.record(t.string, t.any),
  children
})));
const componentProp = t.recursion('ComponentProp', () => excess(t.type({
  type: t.union([t.literal('component-inline-prop'), t.literal('component-block-prop')]),
  propPath: t.union([t.array(t.union([t.string, t.number])), t.undefined]),
  children
})));
const block = t.recursion('Element', () => t.union([layoutArea, onlyChildrenElements, heading, componentBlock, componentProp, paragraph]));
const children = t.recursion('Children', () => t.array(t.union([block, inline])));
const editorCodec = t.array(block);
function isRelationshipData(val) {
  return relationshipData.validate(val, [])._tag === 'Right';
}
function validateDocumentStructure(val) {
  const result = editorCodec.validate(val, []);

  if (result._tag === 'Left') {
    throw new Error('Invalid document structure');
  }
}

class PropValidationError extends Error {
  constructor(message, path) {
    super(message);

    _defineProperty(this, "path", void 0);

    this.path = path;
  }

}

function validateComponentBlockProps(schema, value, relationships, path) {
  if (schema.kind === 'form') {
    if (schema.validate(value)) {
      return value;
    }

    throw new PropValidationError('Invalid form prop value', path);
  }

  if (schema.kind === 'child') {
    return null;
  }

  if (schema.kind === 'relationship') {
    if (schema.many) {
      if (Array.isArray(value) && value.every(isRelationshipData)) {
        // yes, ts understands this completely correctly, i'm as suprised as you are
        return value.map(x => ({
          id: x.id
        }));
      } else {
        throw new PropValidationError(`Invalid relationship value`, path);
      }
    }

    if (value === null || isRelationshipData(value)) {
      return value === null ? null : {
        id: value.id
      };
    } else {
      throw new PropValidationError(`Invalid relationship value`, path);
    }
  }

  if (schema.kind === 'conditional') {
    if (typeof value !== 'object' || value === null) {
      throw new PropValidationError('Conditional value must be an object', path);
    }

    for (const key of Object.keys(value)) {
      if (key !== 'discriminant' && key !== 'value') {
        throw new PropValidationError(`Conditional value only allows keys named "discriminant" and "value", not "${key}"`, path);
      }
    }

    const discriminant = value.discriminant;
    const val = value.value; // for some reason mongo or mongoose or something is saving undefined as null
    // so we're doing this so that we avoid setting undefined on objects

    const obj = {};
    const discriminantVal = validateComponentBlockProps(schema.discriminant, discriminant, relationships, path.concat('discriminant'));

    if (discriminantVal !== undefined) {
      obj.discriminant = discriminantVal;
    }

    const conditionalFieldValue = validateComponentBlockProps(schema.values[discriminant], val, relationships, path.concat('value'));

    if (conditionalFieldValue !== undefined) {
      obj.value = conditionalFieldValue;
    }

    return obj;
  }

  if (schema.kind === 'object') {
    if (typeof value !== 'object' || value === null) {
      throw new PropValidationError('Object value must be an object', path);
    }

    const allowedKeysSet = new Set(Object.keys(schema.fields));

    for (const key of Object.keys(value)) {
      if (!allowedKeysSet.has(key)) {
        throw new PropValidationError(`Key on object value "${key}" is not allowed`, path);
      }
    }

    let val = {};

    for (const key of Object.keys(schema.fields)) {
      const propVal = validateComponentBlockProps(schema.fields[key], value[key], relationships, path.concat(key)); // for some reason mongo or mongoose or something is saving undefined as null
      // so we're doing this so that we avoid setting undefined on objects

      if (propVal !== undefined) {
        val[key] = propVal;
      }
    }

    return val;
  }

  if (schema.kind === 'array') {
    if (!Array.isArray(value)) {
      throw new PropValidationError('Array field value must be an array', path);
    }

    return value.map((innerVal, i) => {
      return validateComponentBlockProps(schema.element, innerVal, relationships, path.concat(i));
    });
  }

  assertNever(schema);
}

function isText(node) {
  return Text.isText(node);
} // note that the errors thrown from here will only be exposed
// as internal server error from the graphql api in prod
// this is fine because these cases are pretty much all about
// malicious content being inserted, not valid content


function getValidatedNodeWithNormalizedComponentFormProps(node, componentBlocks, relationships) {
  if (isText(node)) {
    return node;
  }

  if (node.type === 'component-block') {
    if (componentBlocks.hasOwnProperty(node.component)) {
      const componentBlock = componentBlocks[node.component];
      node = _objectSpread(_objectSpread({}, node), {}, {
        props: validateComponentBlockProps({
          kind: 'object',
          fields: componentBlock.schema
        }, node.props, relationships, [])
      });
    }
  }

  if (node.type === 'relationship') {
    var _node$data;

    node = {
      type: 'relationship',
      data: ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.id) !== undefined ? {
        id: node.data.id,
        data: undefined,
        label: undefined
      } : null,
      relationship: node.relationship,
      children: node.children
    };
  }

  return _objectSpread(_objectSpread({}, node), {}, {
    children: node.children.map(x => getValidatedNodeWithNormalizedComponentFormProps(x, componentBlocks, relationships))
  });
}
function validateAndNormalizeDocument(value, documentFeatures, componentBlocks, relationships) {
  validateDocumentStructure(value);
  const children = value.map(x => getValidatedNodeWithNormalizedComponentFormProps(x, componentBlocks, relationships));
  const editor = createDocumentEditor(documentFeatures, componentBlocks, relationships);
  editor.children = children;
  Editor.normalize(editor, {
    force: true
  });
  return editor.children;
}

const labelFieldAlias = '____document_field_relationship_item_label';
const idFieldAlias = '____document_field_relationship_item_id';
function addRelationshipData(nodes, context, relationships, componentBlocks) {
  return Promise.all(nodes.map(async node => {
    if (node.type === 'relationship') {
      const relationship = relationships[node.relationship];
      if (!relationship) return node;
      return _objectSpread(_objectSpread({}, node), {}, {
        data: await fetchDataForOne(context, relationship.listKey, relationship.selection || '', node.data)
      });
    }

    if (node.type === 'component-block') {
      const componentBlock = componentBlocks[node.component];

      if (componentBlock) {
        const [props, children] = await Promise.all([addRelationshipDataToComponentProps({
          kind: 'object',
          fields: componentBlock.schema
        }, node.props, (relationship, data) => fetchRelationshipData(context, relationship.listKey, relationship.many, relationship.selection || '', data)), addRelationshipData(node.children, context, relationships, componentBlocks)]);
        return _objectSpread(_objectSpread({}, node), {}, {
          props,
          children
        });
      }
    }

    if ('children' in node && Array.isArray(node.children)) {
      return _objectSpread(_objectSpread({}, node), {}, {
        children: await addRelationshipData(node.children, context, relationships, componentBlocks)
      });
    }

    return node;
  }));
}
async function fetchRelationshipData(context, listKey, many, selection, data) {
  if (!many) return fetchDataForOne(context, listKey, selection, data);
  const ids = Array.isArray(data) ? data.filter(item => item.id != null).map(x => x.id) : [];
  if (!ids.length) return [];
  const labelField = getLabelFieldsForLists(context.graphql.schema)[listKey];
  const val = await context.graphql.run({
    query: `query($ids: [ID!]!) {items:${context.gqlNames(listKey).listQueryName}(where: { id: { in: $ids } }) {${idFieldAlias}:id ${labelFieldAlias}:${labelField}\n${selection || ''}}}`,
    variables: {
      ids
    }
  });
  return Array.isArray(val.items) ? val.items.map(_ref => {
    let {
      [labelFieldAlias]: label,
      [idFieldAlias]: id
    } = _ref,
        data = _objectWithoutProperties(_ref, [labelFieldAlias, idFieldAlias].map(_toPropertyKey));

    return {
      id,
      label,
      data
    };
  }) : [];
}

async function fetchDataForOne(context, listKey, selection, data) {
  // Single related item
  const id = data === null || data === void 0 ? void 0 : data.id;
  if (id == null) return null;
  const labelField = getLabelFieldsForLists(context.graphql.schema)[listKey]; // An exception here indicates something wrong with either the system or the
  // configuration (e.g. a bad selection field). These will surface as system
  // errors from the GraphQL field resolver.

  const val = await context.graphql.run({
    query: `query($id: ID!) {item:${context.gqlNames(listKey).itemQueryName}(where: {id:$id}) {${labelFieldAlias}:${labelField}\n${selection}}}`,
    variables: {
      id
    }
  });

  if (val.item === null) {
    if (!process.env.TEST_ADAPTER) {
      // If we're unable to find the item (e.g. we have a dangling reference), or access was denied
      // then simply return { id } and leave `label` and `data` undefined.
      console.error(`Unable to fetch relationship data: listKey: ${listKey}, many: false, selection: ${selection}, id: ${id} `);
    }

    return {
      id,
      data: undefined,
      label: undefined
    };
  }

  return {
    id,
    label: val.item[labelFieldAlias],
    data: (() => {
      const _val$item = val.item,
            otherData = _objectWithoutProperties(_val$item, [labelFieldAlias].map(_toPropertyKey));

      return otherData;
    })()
  };
}

async function addRelationshipDataToComponentProps(schema, val, fetchData) {
  switch (schema.kind) {
    case 'child':
    case 'form':
      {
        return val;
      }

    case 'relationship':
      {
        return fetchData(schema, val);
      }

    case 'object':
      {
        return Object.fromEntries(await Promise.all(Object.keys(schema.fields).map(async key => [key, // if val[key] === undefined, we know a new field was added to the schema
        // but there is old data in the database that doesn't have the new field
        // we're intentionally not just magically adding it because we may want to
        // have a more optimised strategy of hydrating relationships so we don't
        // want to add something unrelated that requires the current "traverse everything" strategy
        val[key] === undefined ? undefined : await addRelationshipDataToComponentProps(schema.fields[key], val[key], fetchData)])));
      }

    case 'conditional':
      {
        return {
          discriminant: val.discriminant,
          value: await addRelationshipDataToComponentProps(schema.values[val.discriminant], val.value, fetchData)
        };
      }

    case 'array':
      {
        return await Promise.all(val.map(async innerVal => addRelationshipDataToComponentProps(schema.element, innerVal, fetchData)));
      }
  }

  assertNever(schema);
}
const document$1 = parse(`
  query {
    keystone {
      adminMeta {
        lists {
          key
          labelField
        }
      }
    }
  }
`);
const getLabelFieldsForLists = weakMemoize(function getLabelFieldsForLists(schema) {
  const {
    data,
    errors
  } = executeSync({
    schema,
    document: document$1,
    contextValue: {
      isAdminUIBuildProcess: true
    }
  });

  if (errors !== null && errors !== void 0 && errors.length) {
    throw errors[0];
  }

  return Object.fromEntries(data.keystone.adminMeta.lists.map(x => [x.key, x.labelField]));
});

function assertValidComponentSchema(schema, lists) {
  assertValidComponentSchemaInner(schema, [], [], new Set(), lists);
} // recursive things can exist but they have to either be:
// - inside the non-default portion of a conditional field
// - inside an array field
// when we hit the non-default portion of a conditional field or an array field
// checking inside of it essentially means pretend it's a new thing

function assertValidComponentSchemaInner(schema, schemaAncestors, propPath, seenProps, lists) {
  if (schema.kind === 'form' || schema.kind === 'child') {
    return;
  }

  if (schema.kind === 'relationship') {
    if (lists.has(schema.listKey)) {
      return;
    }

    throw new Error(`The relationship field at "${propPath.join('.')}" has the listKey "${schema.listKey}" but no list named "${schema.listKey}" exists.`);
  }

  const ancestor = schemaAncestors.indexOf(schema);

  if (ancestor !== -1) {
    throw new Error(`The field "${propPath.join('.')}" is the same as it's ancestor. Use an array or conditional field for recursive structures.`);
  }

  if (seenProps.has(schema)) {
    return;
  }

  propPath.push(schema.kind);

  try {
    seenProps.add(schema);

    if (schema.kind === 'array') {
      assertValidComponentSchemaInner(schema.element, [], propPath, seenProps, lists);
      return;
    }

    if (schema.kind === 'object') {
      schemaAncestors.push(schema);

      for (const [key, innerProp] of Object.entries(schema.fields)) {
        propPath.push(key);

        if (schema.fields[key] !== innerProp) {
          throw new Error(`Fields on an object field must not change over time but the field at "${propPath.join('.')}" changes between accesses`);
        }

        assertValidComponentSchemaInner(innerProp, schemaAncestors, propPath, seenProps, lists);
        propPath.pop();
      }

      schemaAncestors.pop();
      return;
    }

    if (schema.kind === 'conditional') {
      schemaAncestors.push(schema);
      const stringifiedDefaultDiscriminant = schema.discriminant.defaultValue.toString();

      for (const [key, innerProp] of Object.entries(schema.values)) {
        propPath.push(key);

        if (schema.values[key] !== innerProp) {
          throw new Error(`Fields on a conditional field must not change over time but the field at "${propPath.join('.')}" changes between accesses`);
        }

        assertValidComponentSchemaInner(innerProp, key === stringifiedDefaultDiscriminant ? schemaAncestors : [], propPath, seenProps, lists);
        propPath.pop();
      }

      schemaAncestors.pop();
      return;
    }
  } finally {
    propPath.pop();
  }

  assertNever(schema);
}

const _excluded = ["componentBlocks", "dividers", "formatting", "layouts", "relationships", "links"];
const views = path.join(path.dirname(__dirname), 'views');
const document = function () {
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  let {
    componentBlocks = {},
    dividers,
    formatting,
    layouts,
    relationships: configRelationships,
    links
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded);

  return meta => {
    var _config$db;

    const documentFeatures = normaliseDocumentFeatures({
      dividers,
      formatting,
      layouts,
      links
    });
    const relationships = normaliseRelationships(configRelationships, meta);

    const inputResolver = data => {
      if (data === null) {
        throw new ApolloError('Input error: Document fields cannot be set to null');
      }

      if (data === undefined) {
        return data;
      }

      return validateAndNormalizeDocument(data, documentFeatures, componentBlocks, relationships);
    };

    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type document");
    }

    const lists = new Set(Object.keys(meta.lists));

    for (const [name, block] of Object.entries(componentBlocks)) {
      try {
        assertValidComponentSchema({
          kind: 'object',
          fields: block.schema
        }, lists);
      } catch (err) {
        throw new Error(`Component block ${name} in ${meta.listKey}.${meta.fieldKey}: ${err.message}`);
      }
    }

    return jsonFieldTypePolyfilledForSQLite(meta.provider, _objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: graphql.arg({
            type: graphql.JSON
          }),

          resolve(val) {
            if (val === undefined) {
              val = [{
                type: 'paragraph',
                children: [{
                  text: ''
                }]
              }];
            }

            return inputResolver(val);
          }

        },
        update: {
          arg: graphql.arg({
            type: graphql.JSON
          }),
          resolve: inputResolver
        }
      },
      output: graphql.field({
        type: graphql.object()({
          name: `${meta.listKey}_${meta.fieldKey}_Document`,
          fields: {
            document: graphql.field({
              args: {
                hydrateRelationships: graphql.arg({
                  type: graphql.nonNull(graphql.Boolean),
                  defaultValue: false
                })
              },
              type: graphql.nonNull(graphql.JSON),

              resolve(_ref2, _ref3, context) {
                let {
                  document
                } = _ref2;
                let {
                  hydrateRelationships
                } = _ref3;
                return hydrateRelationships ? addRelationshipData(document, context, relationships, componentBlocks) : document;
              }

            })
          }
        }),

        resolve(_ref4) {
          let {
            value
          } = _ref4;

          if (value === null) {
            return null;
          }

          return {
            document: value
          };
        }

      }),
      views,

      getAdminMeta() {
        return {
          relationships,
          documentFeatures,
          componentBlocksPassedOnServer: Object.keys(componentBlocks)
        };
      }

    }), {
      mode: 'required',
      default: {
        kind: 'literal',
        value: JSON.stringify([{
          type: 'paragraph',
          children: [{
            text: ''
          }]
        }])
      },
      map: (_config$db = config.db) === null || _config$db === void 0 ? void 0 : _config$db.map
    });
  };
};

function normaliseRelationships(configRelationships, meta) {
  const relationships = {};

  if (configRelationships) {
    Object.keys(configRelationships).forEach(key => {
      var _relationship$selecti;

      const relationship = configRelationships[key];

      if (meta.lists[relationship.listKey] === undefined) {
        throw new Error(`An inline relationship ${relationship.label} (${key}) in the field at ${meta.listKey}.${meta.fieldKey} has listKey set to "${relationship.listKey}" but no list named "${relationship.listKey}" exists.`);
      }

      relationships[key] = _objectSpread(_objectSpread({}, relationship), {}, {
        selection: (_relationship$selecti = relationship.selection) !== null && _relationship$selecti !== void 0 ? _relationship$selecti : null
      });
    });
  }

  return relationships;
}

function normaliseDocumentFeatures(config) {
  var _config$formatting, _formatting$alignment, _formatting$alignment2, _formatting$blockType, _formatting$blockType2, _formatting$inlineMar, _formatting$inlineMar2, _formatting$inlineMar3, _formatting$inlineMar4, _formatting$inlineMar5, _formatting$inlineMar6, _formatting$inlineMar7, _formatting$inlineMar8, _formatting$listTypes, _formatting$listTypes2;

  const formatting = config.formatting === true ? {
    alignment: true,
    blockTypes: true,
    headingLevels: true,
    inlineMarks: true,
    listTypes: true,
    softBreaks: true
  } : (_config$formatting = config.formatting) !== null && _config$formatting !== void 0 ? _config$formatting : {};
  const documentFeatures = {
    formatting: {
      alignment: formatting.alignment === true ? {
        center: true,
        end: true
      } : {
        center: !!((_formatting$alignment = formatting.alignment) !== null && _formatting$alignment !== void 0 && _formatting$alignment.center),
        end: !!((_formatting$alignment2 = formatting.alignment) !== null && _formatting$alignment2 !== void 0 && _formatting$alignment2.end)
      },
      blockTypes: (formatting === null || formatting === void 0 ? void 0 : formatting.blockTypes) === true ? {
        blockquote: true,
        code: true
      } : {
        blockquote: !!((_formatting$blockType = formatting.blockTypes) !== null && _formatting$blockType !== void 0 && _formatting$blockType.blockquote),
        code: !!((_formatting$blockType2 = formatting.blockTypes) !== null && _formatting$blockType2 !== void 0 && _formatting$blockType2.code)
      },
      headingLevels: (formatting === null || formatting === void 0 ? void 0 : formatting.headingLevels) === true ? [1, 2, 3, 4, 5, 6] : [...new Set(formatting === null || formatting === void 0 ? void 0 : formatting.headingLevels)].sort(),
      inlineMarks: formatting.inlineMarks === true ? {
        bold: true,
        code: true,
        italic: true,
        keyboard: true,
        strikethrough: true,
        subscript: true,
        superscript: true,
        underline: true
      } : {
        bold: !!((_formatting$inlineMar = formatting.inlineMarks) !== null && _formatting$inlineMar !== void 0 && _formatting$inlineMar.bold),
        code: !!((_formatting$inlineMar2 = formatting.inlineMarks) !== null && _formatting$inlineMar2 !== void 0 && _formatting$inlineMar2.code),
        italic: !!((_formatting$inlineMar3 = formatting.inlineMarks) !== null && _formatting$inlineMar3 !== void 0 && _formatting$inlineMar3.italic),
        strikethrough: !!((_formatting$inlineMar4 = formatting.inlineMarks) !== null && _formatting$inlineMar4 !== void 0 && _formatting$inlineMar4.strikethrough),
        underline: !!((_formatting$inlineMar5 = formatting.inlineMarks) !== null && _formatting$inlineMar5 !== void 0 && _formatting$inlineMar5.underline),
        keyboard: !!((_formatting$inlineMar6 = formatting.inlineMarks) !== null && _formatting$inlineMar6 !== void 0 && _formatting$inlineMar6.keyboard),
        subscript: !!((_formatting$inlineMar7 = formatting.inlineMarks) !== null && _formatting$inlineMar7 !== void 0 && _formatting$inlineMar7.subscript),
        superscript: !!((_formatting$inlineMar8 = formatting.inlineMarks) !== null && _formatting$inlineMar8 !== void 0 && _formatting$inlineMar8.superscript)
      },
      listTypes: formatting.listTypes === true ? {
        ordered: true,
        unordered: true
      } : {
        ordered: !!((_formatting$listTypes = formatting.listTypes) !== null && _formatting$listTypes !== void 0 && _formatting$listTypes.ordered),
        unordered: !!((_formatting$listTypes2 = formatting.listTypes) !== null && _formatting$listTypes2 !== void 0 && _formatting$listTypes2.unordered)
      },
      softBreaks: !!formatting.softBreaks
    },
    links: !!config.links,
    layouts: [...new Set((config.layouts || []).map(x => JSON.stringify(x)))].map(x => JSON.parse(x)),
    dividers: !!config.dividers
  };
  return documentFeatures;
}

export { document };
