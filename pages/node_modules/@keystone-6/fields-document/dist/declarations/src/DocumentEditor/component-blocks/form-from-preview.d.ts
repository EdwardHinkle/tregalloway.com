/// <reference types="react" />
import { ArrayField, ComponentSchema, ConditionalField, FormField, ObjectField, RelationshipField } from './api';
export declare type NonChildFieldComponentSchema = FormField<any, any> | ObjectField | ConditionalField<FormField<any, any>, {
    [key: string]: ComponentSchema;
}> | RelationshipField<boolean> | ArrayField<ComponentSchema>;
export declare const FormValueContentFromPreviewProps: import("react").NamedExoticComponent<({
    readonly value: any;
    onChange(value: any): void;
    readonly options: any;
    readonly schema: FormField<any, any>;
} | {
    readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
    onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
    readonly schema: RelationshipField<boolean>;
} | {
    readonly elements: readonly (({
        readonly value: any;
        onChange(value: any): void;
        readonly options: any;
        readonly schema: FormField<any, any>;
    } | {
        readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
        onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
        readonly schema: RelationshipField<boolean>;
    } | {
        readonly element: unknown;
        readonly schema: import("./api").ChildField;
    } | {
        readonly fields: {
            readonly [x: string]: {
                readonly value: any;
                onChange(value: any): void;
                readonly options: any;
                readonly schema: FormField<any, any>;
            } | {
                readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                readonly schema: RelationshipField<boolean>;
            } | {
                readonly element: unknown;
                readonly schema: import("./api").ChildField;
            } | any | {
                readonly discriminant: string | true;
                onChange<Discriminant extends any>(discriminant: Discriminant, value?: any): void;
                readonly options: any;
                readonly value: {
                    readonly value: any;
                    onChange(value: any): void;
                    readonly options: any;
                    readonly schema: FormField<any, any>;
                } | {
                    readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                    onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                    readonly schema: RelationshipField<boolean>;
                } | {
                    readonly element: unknown;
                    readonly schema: import("./api").ChildField;
                } | any | any | {
                    readonly elements: readonly (({
                        readonly value: any;
                        onChange(value: any): void;
                        readonly options: any;
                        readonly schema: FormField<any, any>;
                    } | {
                        readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                        onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                        readonly schema: RelationshipField<boolean>;
                    } | {
                        readonly element: unknown;
                        readonly schema: import("./api").ChildField;
                    } | any | any | any) & {
                        readonly key: string;
                    })[];
                    readonly onChange: (value: readonly {
                        key: string | undefined;
                        value?: any;
                    }[]) => void;
                    readonly schema: {
                        kind: "array";
                        element: ComponentSchema;
                    };
                };
                readonly schema: ConditionalField<FormField<any, any>, {
                    [key: string]: ComponentSchema;
                }>;
            } | {
                readonly elements: readonly (({
                    readonly value: any;
                    onChange(value: any): void;
                    readonly options: any;
                    readonly schema: FormField<any, any>;
                } | {
                    readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                    onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                    readonly schema: RelationshipField<boolean>;
                } | {
                    readonly element: unknown;
                    readonly schema: import("./api").ChildField;
                } | any | any | any) & {
                    readonly key: string;
                })[];
                readonly onChange: (value: readonly {
                    key: string | undefined;
                    value?: any;
                }[]) => void;
                readonly schema: {
                    kind: "array";
                    element: ComponentSchema;
                };
            };
        };
        onChange(value: {
            readonly [x: string]: any;
        }): void;
        readonly schema: ObjectField<Record<string, ComponentSchema>>;
    } | {
        readonly discriminant: string | true;
        onChange<Discriminant extends any>(discriminant: Discriminant, value?: any): void;
        readonly options: any;
        readonly value: {
            readonly value: any;
            onChange(value: any): void;
            readonly options: any;
            readonly schema: FormField<any, any>;
        } | {
            readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
            onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
            readonly schema: RelationshipField<boolean>;
        } | {
            readonly element: unknown;
            readonly schema: import("./api").ChildField;
        } | any | any | {
            readonly elements: readonly (({
                readonly value: any;
                onChange(value: any): void;
                readonly options: any;
                readonly schema: FormField<any, any>;
            } | {
                readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                readonly schema: RelationshipField<boolean>;
            } | {
                readonly element: unknown;
                readonly schema: import("./api").ChildField;
            } | any | any | any) & {
                readonly key: string;
            })[];
            readonly onChange: (value: readonly {
                key: string | undefined;
                value?: any;
            }[]) => void;
            readonly schema: {
                kind: "array";
                element: ComponentSchema;
            };
        };
        readonly schema: ConditionalField<FormField<any, any>, {
            [key: string]: ComponentSchema;
        }>;
    } | {
        readonly elements: readonly (({
            readonly value: any;
            onChange(value: any): void;
            readonly options: any;
            readonly schema: FormField<any, any>;
        } | {
            readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
            onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
            readonly schema: RelationshipField<boolean>;
        } | {
            readonly element: unknown;
            readonly schema: import("./api").ChildField;
        } | any | any | any) & {
            readonly key: string;
        })[];
        readonly onChange: (value: readonly {
            key: string | undefined;
            value?: any;
        }[]) => void;
        readonly schema: {
            kind: "array";
            element: ComponentSchema;
        };
    }) & {
        readonly key: string;
    })[];
    readonly onChange: (value: readonly {
        key: string | undefined;
        value?: any;
    }[]) => void;
    readonly schema: ArrayField<ComponentSchema>;
} | {
    readonly fields: {
        readonly [x: string]: {
            readonly value: any;
            onChange(value: any): void;
            readonly options: any;
            readonly schema: FormField<any, any>;
        } | {
            readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
            onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
            readonly schema: RelationshipField<boolean>;
        } | {
            readonly element: unknown;
            readonly schema: import("./api").ChildField;
        } | any | {
            readonly discriminant: string | true;
            onChange<Discriminant extends any>(discriminant: Discriminant, value?: any): void;
            readonly options: any;
            readonly value: {
                readonly value: any;
                onChange(value: any): void;
                readonly options: any;
                readonly schema: FormField<any, any>;
            } | {
                readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                readonly schema: RelationshipField<boolean>;
            } | {
                readonly element: unknown;
                readonly schema: import("./api").ChildField;
            } | any | any | {
                readonly elements: readonly (({
                    readonly value: any;
                    onChange(value: any): void;
                    readonly options: any;
                    readonly schema: FormField<any, any>;
                } | {
                    readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                    onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                    readonly schema: RelationshipField<boolean>;
                } | {
                    readonly element: unknown;
                    readonly schema: import("./api").ChildField;
                } | any | any | any) & {
                    readonly key: string;
                })[];
                readonly onChange: (value: readonly {
                    key: string | undefined;
                    value?: any;
                }[]) => void;
                readonly schema: {
                    kind: "array";
                    element: ComponentSchema;
                };
            };
            readonly schema: ConditionalField<FormField<any, any>, {
                [key: string]: ComponentSchema;
            }>;
        } | {
            readonly elements: readonly (({
                readonly value: any;
                onChange(value: any): void;
                readonly options: any;
                readonly schema: FormField<any, any>;
            } | {
                readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                readonly schema: RelationshipField<boolean>;
            } | {
                readonly element: unknown;
                readonly schema: import("./api").ChildField;
            } | any | any | any) & {
                readonly key: string;
            })[];
            readonly onChange: (value: readonly {
                key: string | undefined;
                value?: any;
            }[]) => void;
            readonly schema: {
                kind: "array";
                element: ComponentSchema;
            };
        };
    };
    onChange(value: {
        readonly [x: string]: any;
    }): void;
    readonly schema: ObjectField<Record<string, ComponentSchema>>;
} | {
    readonly discriminant: string | true;
    onChange<Discriminant_1 extends any>(discriminant: Discriminant_1, value?: any): void;
    readonly options: any;
    readonly value: {
        readonly value: any;
        onChange(value: any): void;
        readonly options: any;
        readonly schema: FormField<any, any>;
    } | {
        readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
        onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
        readonly schema: RelationshipField<boolean>;
    } | {
        readonly element: unknown;
        readonly schema: import("./api").ChildField;
    } | {
        readonly fields: {
            readonly [x: string]: {
                readonly value: any;
                onChange(value: any): void;
                readonly options: any;
                readonly schema: FormField<any, any>;
            } | {
                readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                readonly schema: RelationshipField<boolean>;
            } | {
                readonly element: unknown;
                readonly schema: import("./api").ChildField;
            } | any | {
                readonly discriminant: string | true;
                onChange<Discriminant extends any>(discriminant: Discriminant, value?: any): void;
                readonly options: any;
                readonly value: {
                    readonly value: any;
                    onChange(value: any): void;
                    readonly options: any;
                    readonly schema: FormField<any, any>;
                } | {
                    readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                    onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                    readonly schema: RelationshipField<boolean>;
                } | {
                    readonly element: unknown;
                    readonly schema: import("./api").ChildField;
                } | any | any | {
                    readonly elements: readonly (({
                        readonly value: any;
                        onChange(value: any): void;
                        readonly options: any;
                        readonly schema: FormField<any, any>;
                    } | {
                        readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                        onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                        readonly schema: RelationshipField<boolean>;
                    } | {
                        readonly element: unknown;
                        readonly schema: import("./api").ChildField;
                    } | any | any | any) & {
                        readonly key: string;
                    })[];
                    readonly onChange: (value: readonly {
                        key: string | undefined;
                        value?: any;
                    }[]) => void;
                    readonly schema: {
                        kind: "array";
                        element: ComponentSchema;
                    };
                };
                readonly schema: ConditionalField<FormField<any, any>, {
                    [key: string]: ComponentSchema;
                }>;
            } | {
                readonly elements: readonly (({
                    readonly value: any;
                    onChange(value: any): void;
                    readonly options: any;
                    readonly schema: FormField<any, any>;
                } | {
                    readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                    onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                    readonly schema: RelationshipField<boolean>;
                } | {
                    readonly element: unknown;
                    readonly schema: import("./api").ChildField;
                } | any | any | any) & {
                    readonly key: string;
                })[];
                readonly onChange: (value: readonly {
                    key: string | undefined;
                    value?: any;
                }[]) => void;
                readonly schema: {
                    kind: "array";
                    element: ComponentSchema;
                };
            };
        };
        onChange(value: {
            readonly [x: string]: any;
        }): void;
        readonly schema: ObjectField<Record<string, ComponentSchema>>;
    } | {
        readonly discriminant: string | true;
        onChange<Discriminant extends any>(discriminant: Discriminant, value?: any): void;
        readonly options: any;
        readonly value: {
            readonly value: any;
            onChange(value: any): void;
            readonly options: any;
            readonly schema: FormField<any, any>;
        } | {
            readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
            onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
            readonly schema: RelationshipField<boolean>;
        } | {
            readonly element: unknown;
            readonly schema: import("./api").ChildField;
        } | any | any | {
            readonly elements: readonly (({
                readonly value: any;
                onChange(value: any): void;
                readonly options: any;
                readonly schema: FormField<any, any>;
            } | {
                readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
                onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
                readonly schema: RelationshipField<boolean>;
            } | {
                readonly element: unknown;
                readonly schema: import("./api").ChildField;
            } | any | any | any) & {
                readonly key: string;
            })[];
            readonly onChange: (value: readonly {
                key: string | undefined;
                value?: any;
            }[]) => void;
            readonly schema: {
                kind: "array";
                element: ComponentSchema;
            };
        };
        readonly schema: ConditionalField<FormField<any, any>, {
            [key: string]: ComponentSchema;
        }>;
    } | {
        readonly elements: readonly (({
            readonly value: any;
            onChange(value: any): void;
            readonly options: any;
            readonly schema: FormField<any, any>;
        } | {
            readonly value: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null;
            onChange(relationshipData: import("./api").HydratedRelationshipData | readonly import("./api").HydratedRelationshipData[] | null): void;
            readonly schema: RelationshipField<boolean>;
        } | {
            readonly element: unknown;
            readonly schema: import("./api").ChildField;
        } | any | any | any) & {
            readonly key: string;
        })[];
        readonly onChange: (value: readonly {
            key: string | undefined;
            value?: any;
        }[]) => void;
        readonly schema: {
            kind: "array";
            element: ComponentSchema;
        };
    };
    readonly schema: ConditionalField<FormField<any, any>, {
        [key: string]: ComponentSchema;
    }>;
}) & {
    autoFocus?: boolean | undefined;
    forceValidation?: boolean | undefined;
}>;
export declare function canFieldBeFocused(schema: ComponentSchema): boolean;
