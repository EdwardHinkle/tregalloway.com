interface Data {
    [key: string]: unknown;
}
interface GenericNode<TData extends object = Data> {
    /**
     * The variant of a node.
     */
    type: string;
    /**
     * Information from the ecosystem.
     */
    data?: TData | undefined;
    /**
     * List representing the children of a node.
     */
    children?: SuperNode[];
}
interface BasicNode<TData extends object = Data> extends GenericNode<TData> {
    type: "thematicBreak" | "definition" | "link";
}
interface CodeNode<TData extends object = Data> extends GenericNode<TData> {
    type: "code";
    lang: string | undefined;
    value: string;
    meta: string | undefined;
}
interface JsxNode<TData extends object = Data> extends GenericNode<TData> {
    type: "mdxJsxFlowElement" | "mdxJsxTextElement";
    /**
     * Component name (undefined for React.Fragment)
     */
    name?: string;
    attributes?: {
        name: string;
        value: "string";
    }[];
}
interface EsmNode<TData extends object = Data> extends GenericNode<TData> {
    type: "mdxjsEsm";
    value: string | undefined;
}
declare type SuperNode<TData extends object = Data> = BasicNode<TData> | JsxNode<TData> | EsmNode<TData> | CodeNode<TData>;

declare type CodeHikeConfig = {
    theme: any;
    lineNumbers?: boolean;
    autoImport?: boolean;
    skipLanguages: string[];
    showExpandButton?: boolean;
    showCopyButton?: boolean;
    filepath?: string;
};

declare function transform(unsafeConfig: CodeHikeConfig): (tree: SuperNode, file: any) => Promise<void>;

declare type HighlightedToken = {
    content: string;
    props: {
        style?: React.CSSProperties;
    };
};
declare type HighlightedLine = {
    tokens: HighlightedToken[];
};
declare type Code = {
    lines: HighlightedLine[];
    lang: string;
};

declare function highlight({ code, lang, theme, }: {
    code: string;
    lang: string;
    theme: any;
}): Promise<Code>;

export { highlight, transform as remarkCodeHike };
